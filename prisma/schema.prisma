// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    studioName    String?
    accounts      Account[]
    sessions      Session[]
    lesson        Lesson[]
    student       Student[]
    todo          Todo[]
    Music         Music[]
}

model Student {
    id         String   @id @default(cuid())
    name       String
    age        Int?
    phone      String?
    email      String?
    contact    String?
    instrument String?
    status     Boolean  @default(true)
    image      String?
    work       Work[]
    lesson     Lesson[]
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    music      Music[]
}

model Music {
    id       String    @id @default(cuid())
    title    String
    composer String?
    year     String?
    user     User      @relation(fields: [userId], references: [id])
    userId   String
    student  Student[]
}

// model StudentMusic {
//     studentId String
//     student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

//     musicId String
//     music   Music  @relation(fields: [musicId], references: [id], onDelete: Cascade)

//     @@id([studentId, musicId])
// }

model Lesson {
    id         String   @id @default(cuid())
    attendance String
    payment    String
    archived   Boolean
    date       DateTime
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    Student    Student  @relation(fields: [studentId], references: [id])
    studentId  String
}

model Work {
    id        String  @id @default(cuid())
    text      String
    Student   Student @relation(fields: [studentId], references: [id])
    studentId String

    @@unique([id, studentId])
}

model Todo {
    id        String  @id @default(cuid())
    text      String
    completed Boolean
    user      User    @relation(fields: [userId], references: [id])
    userId    String

    @@unique([text, userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
